//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : RTC.h
//  @ Date : 20.10.2014
//  @ Author : 
//
//


#if !defined(_RTC_H)
#define _RTC_H

#include <Arduino.h>
#include "../../drivers/i2c/I2C.h"

#define DS1307_ADDRESS 0x68
#define SECONDS_PER_DAY 86400L

#define SECONDS_FROM_1970_TO_2000 946684800


// Simple general-purpose date/time class (no TZ / DST / leap second handling!)
class DateTime {
	public:
		DateTime (uint32_t t) {
			t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

			ss = t % 60;
			t /= 60;
			mm = t % 60;
			t /= 60;
			hh = t % 24;
			uint16_t days = t / 24;
			uint8_t leap;
			for (yOff = 0; ; ++yOff) {
				leap = yOff % 4 == 0;
				if (days < 365 + leap)
				break;
				days -= 365 + leap;
			}
			for (m = 1; ; ++m) {
				uint8_t daysPerMonth = pgm_read_byte(RTC::daysInMonth + m - 1);
				if (leap && m == 2)
				++daysPerMonth;
				if (days < daysPerMonth)
				break;
				days -= daysPerMonth;
			}
			d = days + 1;
		}
		
		DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
			if (year >= 2000)
			year -= 2000;
			yOff = year;
			m = month;
			d = day;
			hh = hour;
			mm = min;
			ss = sec;
		}

		// A convenient constructor for using "the compiler's time":
		//   DateTime now (__DATE__, __TIME__);
		// NOTE: using PSTR would further reduce the RAM footprint
		DateTime (const char* date, const char* time) {
			// sample input: date = "Dec 26 2009", time = "12:34:56"
			yOff = conv2d(date + 9);
			// Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
			switch (date[0]) {
				case 'J': m = date[1] == 'a' ? 1 : m = date[2] == 'n' ? 6 : 7; break;
				case 'F': m = 2; break;
				case 'A': m = date[2] == 'r' ? 4 : 8; break;
				case 'M': m = date[2] == 'r' ? 3 : 5; break;
				case 'S': m = 9; break;
				case 'O': m = 10; break;
				case 'N': m = 11; break;
				case 'D': m = 12; break;
			}
			d = conv2d(date + 4);
			hh = conv2d(time);
			mm = conv2d(time + 3);
			ss = conv2d(time + 6);
		}
		
		uint16_t year() const       { return 2000 + yOff; }
		uint8_t month() const       { return m; }
		uint8_t day() const         { return d; }
		uint8_t hour() const        { return hh; }
		uint8_t minute() const      { return mm; }
		uint8_t second() const      { return ss; }

		uint8_t dayOfWeek() const {
			uint16_t day = RTC::date2days(yOff, m, d);
			return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
		}

		// 32-bit times as seconds since 1/1/2000
		long secondstime() const;

		// 32-bit times as seconds since 1/1/1970
		uint32_t unixtime(void) const {
			uint32_t t;
			uint16_t days = RTC::date2days(yOff, m, d);
			t = RTC::time2long(days, hh, mm, ss);
			t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

			return t;
		}

	protected:
		uint8_t yOff, m, d, hh, mm, ss;
		
		static uint8_t conv2d(const char* p) {
			uint8_t v = 0;
			if ('0' <= *p && *p <= '9')
			v = *p - '0';
			return 10 * v + *++p - '0';
		}
};

// RTC using the internal millis() clock, has to be initialized before use
// NOTE: this clock won't be correct once the millis() timer rolls over (>49d?)
class RTC_Millis {
	public:
		RTC_Millis() {
			offset = 0;
		}

		void RTC_Millis::adjust(const DateTime& dt) {
			offset = dt.unixtime() - millis() / 1000;
		}

		DateTime RTC_Millis::now() {
			return (uint32_t)(offset + millis() / 1000);
		}

	protected:
		long offset;
};

class RTC : I2C {
    static uint8_t begin(void);
		

	public:
		const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

		RTC() {
			this->address = DS1307_ADDRESS;
		
			if (isrunning()) {
				Serial.println("RTC is NOT running!");
				// following line sets the RTC to the date & time this sketch was compiled
				adjust(DateTime(__DATE__, __TIME__));
			}		
		}

		// number of days since 2000/01/01, valid for 2001..2099
		static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
			if (y >= 2000)
			y -= 2000;
			uint16_t days = d;
			for (uint8_t i = 1; i < m; ++i)
			days += pgm_read_byte(RTC::daysInMonth + i - 1);
			if (m > 2 && y % 4 == 0)
			++days;
			return days + 365 * y + (y + 3) / 4 - 1;
		}

		static long time2long(uint16_t days, uint8_t h, uint8_t m, uint8_t s) {
			return ((days * 24L + h) * 60 + m) * 60 + s;
		}

		static uint8_t bcd2bin (uint8_t val) {
			return val - 6 * (val >> 4);
		}
	
		static uint8_t bin2bcd (uint8_t val) {
			return val + 6 * (val / 10);
		}

		uint8_t isrunning(void) {
			Wire.beginTransmission(DS1307_ADDRESS);
			Wire.write(0);
			Wire.endTransmission();

			Wire.requestFrom(DS1307_ADDRESS, 1);
			uint8_t ss = Wire.read();
			return !(ss>>7);
		}

		void adjust(const DateTime& dt) {
			Wire.beginTransmission(DS1307_ADDRESS);
			Wire.write(0);
			Wire.write(bin2bcd(dt.second()));
			Wire.write(bin2bcd(dt.minute()));
			Wire.write(bin2bcd(dt.hour()));
			Wire.write(bin2bcd(0));
			Wire.write(bin2bcd(dt.day()));
			Wire.write(bin2bcd(dt.month()));
			Wire.write(bin2bcd(dt.year() - 2000));
			Wire.write(0);
			Wire.endTransmission();
		}

		DateTime now() {
			Wire.beginTransmission(DS1307_ADDRESS);
			Wire.write(0);
			Wire.endTransmission();

			Wire.requestFrom(DS1307_ADDRESS, 7);
			uint8_t ss = bcd2bin(Wire.read() & 0x7F);
			uint8_t mm = bcd2bin(Wire.read());
			uint8_t hh = bcd2bin(Wire.read());
			Wire.read();
			uint8_t d = bcd2bin(Wire.read());
			uint8_t m = bcd2bin(Wire.read());
			uint16_t y = bcd2bin(Wire.read()) + 2000;

			return DateTime (y, m, d, hh, mm, ss);
		}

		//public.

		uint32_t read() {
			return this->now().unixtime();
		}
		
		void set(uint32_t unixtime) {
			this->adjust(DateTime(unixtime));
		}
};

#endif  //_RTC_H
