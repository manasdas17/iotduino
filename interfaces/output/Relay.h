//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Relay.h
//  @ Date : 20.10.2014
//  @ Author :
//
//


#if !defined(_RELAY_H)
#define _RELAY_H

#include <Arduino.h>
#include <drivers/HardwareID.h>
#include <drivers/DigitalIOGeneric.h>

class Relay : public DigitalIOGeneric {
	public:
		Relay(uint8_t pin) : DigitalIOGeneric(pin, false) {
		}

		Relay(uint8_t pin, boolean highIsOn) : DigitalIOGeneric(pin, false) {
			this->highIsOn = highIsOn;
		}

		boolean highIsOn;
		virtual void turnOn();
		virtual void turnOff();
		virtual boolean outputRead() = 0;
		virtual void outputRead(HardwareCommandResult* hwresult) = 0;

		virtual boolean implementsInterface( HardwareTypeIdentifier type );

		/**
		 * @param type
		 * @param result:
		 *        - uintliust[0]: 0=off, 1=on
		 */
		virtual boolean readVal( HardwareTypeIdentifier type, HardwareCommandResult* result );

		/**
		 * @param type
		 * @result result
		 *         - uintlist[0]: 0=off, 1=on, 2=toggle
		 */
		virtual boolean writeVal( HardwareTypeIdentifier type, HardwareCommandResult* result );


		virtual HardwareTypeIdentifier* getImplementedInterfaces(HardwareTypeIdentifier* arr, uint8_t maxLen) {
			DigitalIOGeneric::getImplementedInterfaces(arr, maxLen);
			return this->addImplementedInterface(arr, maxLen, HWType_relay);
		}

	private:
		virtual boolean read();
		virtual void write( int boolean );
		virtual void toggle();


};

#endif  //_RELAY_H
