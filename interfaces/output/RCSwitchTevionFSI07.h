//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : RCSwitch.h
//  @ Date : 20.10.2014
//  @ Author :
//
//


#if !defined(_RCSWITCH_H)
#define _RCSWITCH_H

#include <Arduino.h>
#include <drivers/HardwareID.h>
#include <drivers/DigitalIOGeneric.h>

class RCSwitchTevionFSI07 : public DigitalIO {
	private:
		static const uint8_t repreatNum = 6;

		//total sequence len
		static const uint16_t lengthForBit = (long) 1000*35/24; //1000*37/24; //does not work out due to overhead!
		//bit len
		static const uint16_t lengthForTwoThird = lengthForBit / 3 * 2;
		static const uint16_t lengthForOneTHird = lengthForBit / 3;
		//sync
		static const uint16_t lengthEndHigh = 3000;
		static const uint16_t lengthEndLow = 7000;


		static const uint32_t onA = 0b101011011111110101011100;
		static const uint32_t onB = 0b101011000111111011110101;//0b101011100101100000000101;
		static const uint32_t onC = 0b101000001001011110001110;
		static const uint32_t onD = 0b101010011011001011000111;
		static const uint32_t onALL = 0b101001010100111110110010;
		static const uint32_t offA = 0b101000001001011110001100;
		static const uint32_t offB = 0b101001101100101101000101;
		static const uint32_t offC = 0b101011011111110101011110;
		static const uint32_t offD = 0b101011000111111011110111;
		static const uint32_t offALL = 0b101010111110100100010010;

		const void sendCode(uint32_t val);
		const void sendByte(char i, uint8_t pin);

		virtual boolean readVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) {
			return false;
		}

	public:
		const void turnOnA();
		const void turnOnB();
		const void turnOnC();
		const void turnOnD();
		const void turnOnALL();
		const void turnOffA();
		const void turnOffB();
		const void turnOffC();
		const void turnOffD();
		const void turnOffALL();

		/**
		 * @param pin
		 * @param address
		 */
		RCSwitchTevionFSI07(uint8_t pin, uint8_t hwaddress) : DigitalIO(pin, false, hwaddress) {
			pinMode(pin, OUTPUT);
		}

		virtual boolean implementsInterface( HardwareTypeIdentifier type );

		/**
		 * send data to remote rc plug
		 * @param result contains the following values
		 *	      - uintlist[0]: number of switch [1..4], 5=master
		 *        - uintlist[0]: action, 1=on, 0=off
		 * @return success
		 */
		virtual boolean writeVal( HardwareTypeIdentifier type, HardwareCommandResult* result );

		virtual HardwareTypeIdentifier* getImplementedInterfaces(HardwareTypeIdentifier* arr, uint8_t maxLen);

};

#endif  //_RCSWITCH_H
