//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : SDCard.cpp
//  @ Date : 20.10.2014
//  @ Author :
//
//
#include <sdcard/SDcard.h>

boolean SDcard::openFile(const char* fileName, FileMode mode) {
	if(myFile && currentOpenedFile == fileName && currentOpenedMode == mode) {
		#ifdef DEBUG_SD_ENABLE
			Serial.print(millis());
			Serial.print(F(": SDcard::openFile() openeing "));
			Serial.print(fileName);
			Serial.print(F(" mode="));
			Serial.println(mode);
			Serial.println(F("\talready open."));
			Serial.flush();
		#endif
		return true;
	}
	#ifdef DEBUG_SD_ENABLE
		Serial.print(millis());
		Serial.print(F(": SDcard::openFile() opening "));
		Serial.print(fileName);
		Serial.print(F(" mode="));
		Serial.println(mode);
		Serial.flush();
	#endif

	if(myFile)
		myFile.close();

	myFile = SD.open(fileName, mode);

	if(myFile) {
		currentOpenedFile = (void*) fileName;
		currentOpenedMode = mode;
	}

	return myFile;
}

uint8_t SDcard::getNodeInfoString(uint8_t nodeId, uint8_t* buf, uint8_t bufSize) {
	if(bufSize < NODE_INFO_SIZE)
		return false;

	if(!openFile(fileNameNodeInfo, READ)) {
		return 0;
	}

	uint32_t pos = nodeId * NODE_INFO_SIZE;
	if(!myFile.seek(pos)) {
		return false;
	}

	return myFile.readBytes(buf, NODE_INFO_SIZE);
}

boolean SDcard::appendToFile(const char* fileName, uint8_t* buf, uint8_t bufSize) {
	openFile(fileName, WRITE);
	boolean success = myFile.write(buf, bufSize);
	myFile.flush();

	return success;
}

boolean SDcard::init() {
	if (!SD.begin(PIN_SD_SS)) {
		#ifdef DEBUG_SD_ENABLE
			Serial.print(millis());
			Serial.println(F(": init failed"));
		#endif
		return false;
	}
	#ifdef DEBUG_SD_ENABLE
		Serial.print(millis());
		Serial.println(F(": sd init done"));
	#endif

	currentOpenedFile = NULL;
	currentOpenedMode = 0xff;

	prepareDiscoveryFile();
	return true;
}

void SDcard::prepareDiscoveryFile() {
	#ifdef DEBUG_SD_ENABLE
		Serial.print(millis());
		Serial.print(F(": SDcard::prepareDiscoveryFile() fileName="));
		Serial.println(fileNameDiscoveryInfo);
	#endif

	//prepare discovery swap
 	openFile(fileNameDiscoveryInfo, WRITE);
	if(myFile) {
		uint16_t bytes = 0;
		uint8_t val = 0;
		while(myFile.size() < SD_DISCOVERY_FILESIZE) {
			bytes += myFile.write(&val, 1);
		}
		myFile.flush();

		#ifdef DEBUG_SD_ENABLE
			if(bytes > 0) {
				Serial.print(F("\textented by "));
				Serial.print(bytes);
				Serial.println(F(" bytes"));
				Serial.flush();
			}
		#endif
	}
}
 SDcard::SDcard() {

}
