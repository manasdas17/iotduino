//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AnalogIO.h
//  @ Date : 20.10.2014
//  @ Author :
//
//


#if !defined(_ANALOGIO_H)
#define _ANALOGIO_H

#include <Arduino.h>
#include <drivers/HardwareDriver.h>
#include <drivers/HardwareID.h>
#include <drivers/multiplex/Multiplexible.h>
#include <drivers/multiplex/NoMultiplex.h>

class AnalogIO : public HardwareDriver {
	protected:
		Multiplexible* pin;
		boolean pullup;
	public:
		AnalogIO(Multiplexible* pin, uint8_t hwaddress) : HardwareDriver(hwaddress) {
			this->pin = pin;
		}
		AnalogIO(uint8_t pin, uint8_t hwaddress) : HardwareDriver(hwaddress) {
			this->pin = new NoMultiplex(pin);
		}

		virtual uint8_t getPIN();

		virtual boolean implementsInterface( HardwareTypeIdentifier type ) = 0;

		virtual HardwareTypeIdentifier* getImplementedInterfaces(HardwareTypeIdentifier* arr, uint8_t maxLen) {
			return this->addImplementedInterface(arr, maxLen, HWType_ANALOG);
		}

		virtual boolean readVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) = 0;
		virtual boolean writeVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) = 0;

		template<typename T>
		subscription_event_type_t checkForEvent(HardwareCommandResult* newReading, T val_old, T val_new, T minDiff) {
			//check is we have a new event
			subscription_event_type_t type = EVENT_TYPE_DISABLED;

			if(val_old - minDiff > val_new) {
				type = EVENT_TYPE_EDGE_FALLING;
			} else if(val_old + minDiff < val_new) {
				type = EVENT_TYPE_EDGE_RISING;
			}

			//update
			if(type != EVENT_TYPE_DISABLED) {
				updateResult(newReading, type);
				#ifdef DEBUG_HARDWARE_ENABLE
				Serial.print(millis());
				Serial.print(F(": AnalogIO::CheckForEvent() eventTypeDetected="));
				Serial.println(type);
				Serial.flush();
				#endif
			}

			return type;
		}

};

#endif  //_ANALOGIO_H
