//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : DigitalIOGeneric.cpp
//  @ Date : 20.10.2014
//  @ Author : 
//
//


#include "../../interfaces/DigitalIOGeneric.h"

boolean DigitalIOGeneric::read() {
	uint8_t pin = this->getPIN();

	pinMode(pin, (this->getPullUp()) ? INPUT_PULLUP : INPUT);
	return digitalRead(pin);
}

//boolean DigitalIOGeneric::read( HardwareCommandResult* hwresult ) {
	//readVal(HWType_DIGITAL, hwresult);
//}

void DigitalIOGeneric::write(int boolean) {
	uint8_t pin = this->getPIN();

	pinMode(pin, OUTPUT);
	digitalWrite(pin, boolean);
}

void DigitalIOGeneric::toggle() {
	uint8_t pin = this->getPIN();

	pinMode(pin, OUTPUT);
	digitalWrite(pin, !digitalRead(pin));
}

boolean DigitalIOGeneric::outputRead() {
	uint8_t pin = this->getPIN();
	return digitalRead(pin);
}

boolean DigitalIOGeneric::implementsInterface( HardwareTypeIdentifier type ) {
	if(type == HWType_DIGITAL)
		return true;
	return false;
}

boolean DigitalIOGeneric::readVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) {
	if(implementsInterface(type)) {
		result->setUintListNum(1);
		result->getUintList()[0] = read();
		
		return true;
	}
	
	return false;
}

boolean DigitalIOGeneric::writeVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) {
	if(implementsInterface(type) && result != NULL) {
		uint8_t action = result->getUintList()[0];
		
		switch(action) {
			case 0:
				write(false);
				break;
			case 1:
				write(true);
				break;
			case 2:
				write(!read());
				break;
			default:
				return false;
		}
		return true;
	}
	
	return false;
}

