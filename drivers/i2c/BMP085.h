/**
 * With many thanks to Jimb0,
 * major parts taken from the tutorial at https://www.sparkfun.com/tutorials/253
 */
//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : BMP085.h
//  @ Date : 20.10.2014
//  @ Author :
//
//


#if !defined(_BMP085_H)
#define _BMP085_H

#define BMP085_ADDRESS 0x77

#include <Arduino.h>
#include "I2C.h"
#include "../../interfaces/input/Pressure.h"
#include "../../interfaces/input/Temperature.h"

class BMP085 : public I2C, public Pressure, public Temperature {
	static const unsigned char OSS = 0;  // Oversampling Setting

	// Calibration values
	int ac1;
	int ac2;
	int ac3;
	unsigned int ac4;
	unsigned int ac5;
	unsigned int ac6;
	int b1;
	int b2;
	int mb;
	int mc;
	int md;

	// b5 is calculated in bmp085GetTemperature(...), this variable is also used in bmp085GetPressure(...)
	// so ...Temperature(...) must be called before ...Pressure(...).
	long b5;

	short temperature;
	long pressure;

	// Use these for altitude conversions
	static const long p0 = 101325;     // Pressure at sea level (Pa)
	float altitude;

	// Read 1 byte from the BMP085 at 'address'
	char bmp085Read(unsigned char address);

	// Read 2 bytes from the BMP085
	// First byte will be from 'address'
	// Second byte will be from 'address'+1
	int bmp085ReadInt(unsigned char address);

	// Stores all of the bmp085's calibration values into global variables
	// Calibration values are required to calculate temp and pressure
	// This function should be called at the beginning of the program
	void bmp085Calibration();

	// Read the uncompensated temperature value
	unsigned int bmp085ReadUT();

	// Read the uncompensated pressure value
	unsigned long bmp085ReadUP();

	// Calculate temperature given ut.
	// Value returned will be in units of 0.1 deg C
	short bmp085GetTemperature(unsigned int ut);

	// Calculate pressure given up
	// calibration values must be known
	// b5 is also required so bmp085GetTemperature(...) must be called first.
	// Value returned will be pressure in units of Pa.
	long bmp085GetPressure(unsigned long up);


	public:
		BMP085() {
			this->address = BMP085_ADDRESS;
			Wire.begin();
			bmp085Calibration();
		}

		uint16_t readPressure();

		void readPressure( HardwareCommandResult* hwresult );

		int8_t readTemperature();

		void readTemperature( HardwareCommandResult* hwresult );

		static uint16_t getAltitude(uint16_t pressure);

		uint16_t getAltitude();

		void getAltitude( HardwareCommandResult* hwresult );

		boolean readVal( HardwareTypeIdentifier type, HardwareCommandResult* result );

		boolean implementsInterface( HardwareTypeIdentifier type );

		HardwareTypeIdentifier* getImplementedInterfaces(HardwareTypeIdentifier* arr, uint8_t maxLen) {
			I2C::getImplementedInterfaces(arr, maxLen);
			this->addImplementedInterface(arr, maxLen, HWType_pressure);
			return this->addImplementedInterface(arr, maxLen, HWType_temprature);
		}
};

#endif  //_BMP085_H
