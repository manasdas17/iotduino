#include "BMP085.h"

char BMP085::bmp085Read(unsigned char address) {
	  //unsigned char data;

	  Wire.beginTransmission(this->i2cAddress);
	  Wire.write(address);
	  Wire.endTransmission();

	  Wire.requestFrom(this->i2cAddress, 1);
	  while(!Wire.available())
	  ;

	  return Wire.read();
}

int BMP085::bmp085ReadInt( unsigned char address ) {
	  unsigned char msb, lsb;

	  Wire.beginTransmission(this->i2cAddress);
	  Wire.write(address);
	  Wire.endTransmission();

	  Wire.requestFrom(this->i2cAddress, 2);
	  while(Wire.available()<2)
	  ;
	  msb = Wire.read();
	  lsb = Wire.read();

	  return (int) msb<<8 | lsb;
}

void BMP085::bmp085Calibration() {
	  ac1 = bmp085ReadInt(0xAA);
	  ac2 = bmp085ReadInt(0xAC);
	  ac3 = bmp085ReadInt(0xAE);
	  ac4 = bmp085ReadInt(0xB0);
	  ac5 = bmp085ReadInt(0xB2);
	  ac6 = bmp085ReadInt(0xB4);
	  b1 = bmp085ReadInt(0xB6);
	  b2 = bmp085ReadInt(0xB8);
	  mb = bmp085ReadInt(0xBA);
	  mc = bmp085ReadInt(0xBC);
	  md = bmp085ReadInt(0xBE);
}

unsigned int BMP085::bmp085ReadUT() {
	  unsigned int ut;

	  // Write 0x2E into Register 0xF4
	  // This requests a temperature reading
	  Wire.beginTransmission(this->i2cAddress);
	  Wire.write(0xF4);
	  Wire.write(0x2E);
	  Wire.endTransmission();

	  // Wait at least 4.5ms
	  delay(5);

	  // Read two bytes from registers 0xF6 and 0xF7
	  ut = bmp085ReadInt(0xF6);
	  return ut;
}

unsigned long BMP085::bmp085ReadUP() {
	unsigned char msb, lsb, xlsb;
	unsigned long up = 0;

	// Write 0x34+(OSS<<6) into register 0xF4
	// Request a pressure reading w/ oversampling setting
	Wire.beginTransmission(this->i2cAddress);
	Wire.write(0xF4);
	Wire.write(0x34 + (OSS<<6));
	Wire.endTransmission();

	// Wait for conversion, delay time dependent on OSS
	delay(2 + (3<<OSS));

	// Read register 0xF6 (MSB), 0xF7 (LSB), and 0xF8 (XLSB)
	Wire.beginTransmission(this->i2cAddress);
	Wire.write(0xF6);
	Wire.endTransmission();
	Wire.requestFrom(this->i2cAddress, 3);

	// Wait for data to become available
	while(Wire.available() < 3)
	;
	msb = Wire.read();
	lsb = Wire.read();
	xlsb = Wire.read();

	up = (((unsigned long) msb << 16) | ((unsigned long) lsb << 8) | (unsigned long) xlsb) >> (8-OSS);

	return up;
}

short BMP085::bmp085GetTemperature( unsigned int ut ) {
	long x1, x2;

	x1 = (((long)ut - (long)ac6)*(long)ac5) >> 15;
	x2 = ((long)mc << 11)/(x1 + md);
	b5 = x1 + x2;

	return ((b5 + 8)>>4);
}

long BMP085::bmp085GetPressure( unsigned long up ) {
	long x1, x2, x3, b3, b6, p;
	unsigned long b4, b7;

	b6 = b5 - 4000;
	// Calculate B3
	x1 = (b2 * (b6 * b6)>>12)>>11;
	x2 = (ac2 * b6)>>11;
	x3 = x1 + x2;
	b3 = (((((long)ac1)*4 + x3)<<OSS) + 2)>>2;

	// Calculate B4
	x1 = (ac3 * b6)>>13;
	x2 = (b1 * ((b6 * b6)>>12))>>16;
	x3 = ((x1 + x2) + 2)>>2;
	b4 = (ac4 * (unsigned long)(x3 + 32768))>>15;

	b7 = ((unsigned long)(up - b3) * (50000>>OSS));
	if (b7 < 0x80000000)
	p = (b7<<1)/b4;
	else
	p = (b7/b4)<<1;

	x1 = (p>>8) * (p>>8);
	x1 = (x1 * 3038)>>16;
	x2 = (-7357 * p)>>16;
	p += (x1 + x2 + 3791)>>4;

	return p;
}

uint16_t BMP085::getAltitude(uint16_t pressure) {
	return (uint16_t) (44330 * (1 - pow(((float) pressure/p0), 0.190295)));
}

uint16_t BMP085::getAltitude() {
	return getAltitude(readPressure());
}

void BMP085::getAltitude( HardwareCommandResult* hwresult ) {
	hwresult->setUint16ListNum(1);
	hwresult->getUint16List()[0] = getAltitude();
}

uint16_t BMP085::readPressure() {
	pressure = bmp085GetPressure(bmp085ReadUP());
	return pressure;
}

void BMP085::readPressure( HardwareCommandResult* hwresult ) {
	hwresult->setUint16ListNum(1);
	hwresult->getUint16List()[0] = readPressure();
}

int8_t BMP085::readTemperature() {
	temperature = bmp085GetTemperature(bmp085ReadUT());
	return temperature;
}

void BMP085::readTemperature( HardwareCommandResult* hwresult ) {
	hwresult->setInt8ListNum(1);
	hwresult->getInt8List()[0] = readTemperature();
}

boolean BMP085::readVal( HardwareTypeIdentifier type, HardwareCommandResult* result ) {
	if(type == HWType_temprature) {
		readTemperature(result);
		return true;
	} else if(type == HWType_pressure) {
		readPressure(result);
		return true;
	}

	return false;
}

boolean BMP085::implementsInterface( HardwareTypeIdentifier type ) {
	if(type == HWType_temprature || type == HWType_pressure)
		return true;
	return false;
}
