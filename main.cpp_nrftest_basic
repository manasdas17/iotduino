#include <Arduino.h>


//Layer2rf24* network;

#include <networking/rf24/nRF24L01.h>
#include <networking/rf24/RF24.h>
#include <networking/rf24/printf.h>
RF24* radio;

#define SERVER

uint64_t addressBroadcast = 0xf0f0f0f0f0LL;
uint64_t address1 = 0x9876543210LL;
uint64_t address2 = 0x9876543211LL;
#define PAYLOAD_LEN 8

#ifdef SERVER
void setup() {
	Serial.begin(115200);
	Serial.println("start server...");

	//network = new Layer2rf24(9, 10);
	radio = new RF24(8, SS);
	radio->begin();
	radio->setPALevel(RF24_PA_MAX);
	radio->setChannel(1);
	radio->setCRCLength(RF24_CRC_16);
	radio->setDataRate(RF24_250KBPS);
	radio->setPayloadSize(PAYLOAD_LEN);
	radio->setRetries(15, 15);
	radio->setAutoAck(true);

	radio->openReadingPipe(0, addressBroadcast);
	radio->openReadingPipe(1, address1);
	radio->openReadingPipe(2, address2);
	radio->startListening();

	radio->powerUp();
}

void loop() {
	radio->stopListening();
	char* strB = "broadcastx";
	char* str1 = "nodeAxxxxx";
	char* str2 = "nodeBxxxxx";
	boolean ok = false;

	radio->openWritingPipe(addressBroadcast);
	radio->write(strB, PAYLOAD_LEN, true); //non-acked, multicast.
	Serial.print(millis());
	Serial.println(": broadcast sent.");

	radio->txStandBy();

	radio->openWritingPipe(address1);
	ok = radio->write(str1, PAYLOAD_LEN, false); //no multicast
	if(!ok)	{
		Serial.print(millis());
		Serial.println(": 0x9876543210LL failed.");
	} else {
		Serial.print(millis());
		Serial.println(": 0x9876543210LL ACKed.");
	}

	radio->txStandBy();

	radio->openWritingPipe(address2);
	ok = radio->write(str2, PAYLOAD_LEN, false); //no multicast
	if(!ok)	{
		Serial.print(millis());
		Serial.println(": 0x9876543211LL failed.");
	} else {
		Serial.print(millis());
		Serial.println(": 0x9876543211LL ACKed.");
	}

	radio->txStandBy();

	radio->stopListening();
	delay(200);
}

#else

void setup() {
	Serial.begin(115200);
	Serial.println("start clientXX...");

	//network = new Layer2rf24(9, 10);
	radio = new RF24(8, SS);
	radio->begin();
	radio->setPALevel(RF24_PA_MAX);
	radio->setChannel(1);
	radio->setCRCLength(RF24_CRC_16);
	radio->setDataRate(RF24_250KBPS);
	radio->setPayloadSize(PAYLOAD_LEN);
	radio->setRetries(15, 15);
	radio->setAutoAck(true);

	radio->openReadingPipe(0, addressBroadcast);
	radio->openReadingPipe(1, address1);
	radio->openReadingPipe(2, address2);

	radio->startListening();
	Serial.println("start listening...");
}

void loop() {
	char buf[PAYLOAD_LEN];
	uint8_t receivePipe = 9;
	uint8_t receivePipe0 = 9;
	uint8_t receivePipe1 = 9;
	uint8_t receivePipe2 = 9;

	while(radio->available()) {
		if(radio->available(&receivePipe0))
			receivePipe = 0;
		else if(radio->available(&receivePipe1))
			receivePipe = 1;
		else if(radio->available(&receivePipe2))
			receivePipe = 2;
		else
			receivePipe = 9;

		radio->read(buf, PAYLOAD_LEN);
		Serial.print(millis());
		Serial.print(": pipe #");
		Serial.print(receivePipe);
		Serial.print(" received: ");
		Serial.println(buf);
	}
}
#endif